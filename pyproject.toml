[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "chest_xray_pneumonia_detector"
version = "0.2.0"
requires-python = ">=3.8"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["chest_xray_pneumonia_detector"]
py-modules = [
    "architecture_review",
    "data_loader",
    "data_split",
    "evaluate",
    "grad_cam",
    "inference",
    "model_builder",
    "predict_utils",
    "dataset_stats",
    "train_engine",
    "version_cli",
    "performance_benchmark",
    "model_architecture_validation",
    "dependency_security_scan",
    "synthetic_medical_data_generator",
    "model_registry",
    "model_management_cli",
    "image_utils",
]

[project.scripts]
cxr-version = "version_cli:main"
cxr-dataset-stats = "dataset_stats:main"
cxr-benchmark = "performance_benchmark:main"
cxr-validate = "model_architecture_validation:main"
cxr-security-scan = "dependency_security_scan:main"
cxr-generate-data = "synthetic_medical_data_generator:main"
cxr-model-registry = "model_management_cli:main"

# Tool Configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | \.pytest_cache
  | \.ruff_cache
  | _build
  | buck-out
  | build
  | dist
  | mlruns
  | saved_models
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "C901", # too-complex
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
    "S", # bandit (security)
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # assert
    "S301",  # pickle
    "S311",  # random
    "S603",  # subprocess call check
    "S607",  # starting a process with a partial executable path
]
unfixable = [
    "F841", # unused variables
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "mlruns",
    "saved_models",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S311", "ARG001"]
"src/synthetic_medical_data_generator.py" = ["S311"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "keras.*",
    "sklearn.*",
    "cv2.*",
    "matplotlib.*",
    "seaborn.*",
    "PIL.*",
    "mlflow.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv", "mlruns"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests.py"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:.artifacts/coverage-html",
    "--cov-report=xml:.artifacts/coverage.xml",
    "--cov-report=json:.artifacts/coverage.json",
    "--cov-fail-under=80",
    "--timeout=300",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "medical: marks tests related to medical data handling",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
]
xfail_strict = true

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
show_missing = true
precision = 2
