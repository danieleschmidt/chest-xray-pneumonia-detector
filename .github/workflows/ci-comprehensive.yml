name: Comprehensive CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.4.2'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run ruff linting
        run: |
          ruff check src tests --output-format=github

      - name: Run black formatting check
        run: |
          black --check src tests

      - name: Run bandit security scan
        run: |
          bandit -r src -f json -o bandit-report.json
          bandit -r src -f txt

      - name: Upload bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

      - name: Run safety dependency check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload safety results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safety-results
          path: safety-report.json

  # Testing Matrix
  test:
    name: Test Suite
    needs: quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html -m "not slow and not integration"

      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        run: |
          pytest tests/ -v -m "integration"

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: htmlcov/

  # Performance Testing
  performance:
    name: Performance Tests
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v -m "slow" --tb=short

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance-results/

  # Build and Container Tests
  build:
    name: Build & Container Tests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: false
          tags: |
            ghcr.io/${{ github.repository }}-dev:latest
            ghcr.io/${{ github.repository }}-dev:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container
        run: |
          docker run --rm ghcr.io/${{ github.repository }}-dev:${{ github.sha }} python -c "import src; print('Container test passed')"

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          # Check for broken links in markdown files
          find . -name "*.md" -exec grep -l "http" {} \; | head -10
          
          # Validate that all CLI commands have help text
          python -c "
          import os
          help_files = ['README.md', 'API_USAGE_GUIDE.md']
          for file in help_files:
              if os.path.exists(file):
                  print(f'✅ {file} exists')
              else:
                  print(f'❌ {file} missing')
          "

      - name: Check architecture documentation
        run: |
          test -f ARCHITECTURE.md && echo "✅ Architecture docs exist" || echo "❌ Architecture docs missing"
          test -d docs/adr && echo "✅ ADR directory exists" || echo "❌ ADR directory missing"

  # Security Analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run additional security checks
        run: |
          # Check for secrets in code
          git secrets --scan --recursive . || echo "git-secrets not installed"
          
          # Check for common security issues
          grep -r "password\|secret\|key" src/ || echo "No obvious secrets found"

  # Dependency Updates
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # Notification and Reporting
  notify:
    name: Notify Results
    needs: [quality, test, performance, build, docs, security]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Collect job results
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docs: ${{ needs.docs.result }}"
          echo "Security: ${{ needs.security.result }}"

      - name: Create status badge
        run: |
          # This would create a status badge for the README
          echo "CI Status: $(if [[ '${{ needs.quality.result }}' == 'success' && '${{ needs.test.result }}' == 'success' ]]; then echo 'passing'; else echo 'failing'; fi)"