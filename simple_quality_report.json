{
  "timestamp": "2025-08-24T21:49:27.261362",
  "total_checks": 9,
  "passed_checks": 8,
  "failed_checks": 1,
  "success_rate": 88.88888888888889,
  "required_failures": 1,
  "quality_score": 88.88888888888889,
  "status": "FAILED",
  "results": [
    {
      "description": "Python syntax check - Gen4 Neural Quantum Fusion",
      "command": "python3 -m py_compile src/gen4_neural_quantum_fusion.py",
      "return_code": 0,
      "stdout": "",
      "stderr": "",
      "execution_time": 0.06705117225646973,
      "passed": true
    },
    {
      "description": "Python syntax check - Adaptive Intelligence Orchestrator",
      "command": "python3 -m py_compile src/adaptive_intelligence_orchestrator.py",
      "return_code": 0,
      "stdout": "",
      "stderr": "",
      "execution_time": 0.06562495231628418,
      "passed": true
    },
    {
      "description": "Python syntax check - Robust Medical AI Framework",
      "command": "python3 -m py_compile src/robust_medical_ai_framework.py",
      "return_code": 0,
      "stdout": "",
      "stderr": "",
      "execution_time": 0.06529593467712402,
      "passed": true
    },
    {
      "description": "Code quality check (essential errors only)",
      "command": "ruff check src/ --select E,F --ignore E501,F401 --exit-zero",
      "return_code": 0,
      "stdout": "F541 [*] f-string without any placeholders\n   --> src/adaptive_intelligence_orchestrator.py:571:15\n    |\n569 |         # Final status\n570 |         final_status = await orchestrator.get_orchestrator_status()\n571 |         print(f\"\\nFinal Status:\")\n    |               ^^^^^^^^^^^^^^^^^^\n572 |         print(f\"System State: {final_status['system_state']}\")\n573 |         print(f\"Avg Quantum Coherence: {final_status['performance_summary']['avg_quantum_coherence']:.3f}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `alpha` is assigned to but never used\n   --> src/adaptive_medical_research_engine.py:505:9\n    |\n503 |         # Calculate sample size using power analysis\n504 |         effect_size = 0.5  # Medium effect size\n505 |         alpha = 0.05\n    |         ^^^^^\n506 |         power = 0.8\n507 |         sample_size = max(100, int(16 * (1.96 + 0.84)**2 / effect_size**2))  # Simplified calculation\n    |\nhelp: Remove assignment to unused variable `alpha`\n\nF841 Local variable `power` is assigned to but never used\n   --> src/adaptive_medical_research_engine.py:506:9\n    |\n504 |         effect_size = 0.5  # Medium effect size\n505 |         alpha = 0.05\n506 |         power = 0.8\n    |         ^^^^^\n507 |         sample_size = max(100, int(16 * (1.96 + 0.84)**2 / effect_size**2))  # Simplified calculation\n    |\nhelp: Remove assignment to unused variable `power`\n\nF541 [*] f-string without any placeholders\n   --> src/adaptive_medical_research_engine.py:867:15\n    |\n865 |     if study['federated_assessment']['feasible']:\n866 |         results = engine.execute_federated_research(study['project_id'])\n867 |         print(f\"\\nFederated execution completed!\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n868 |         print(f\"Final accuracy: {results['federated_results']['final_accuracy']:.3f}\")\n869 |         print(f\"Rounds executed: {results['federated_results']['total_rounds']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/adaptive_medical_research_engine.py:873:11\n    |\n871 |     # Get research insights\n872 |     insights = engine.get_research_insights()\n873 |     print(f\"\\nResearch Portfolio Insights:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n874 |     print(f\"Total projects: {insights['research_portfolio']['total_projects']}\")\n875 |     print(f\"Federated nodes: {insights['federated_network']['registered_nodes']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/adaptive_quantum_medical_pipeline.py:498:15\n    |\n496 |         # Generate adaptation report\n497 |         report = pipeline.generate_adaptation_report()\n498 |         print(f\"\\n\ud83d\udcc8 Adaptation Report:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n499 |         print(f\"Adaptation strategy: {report['adaptation_strategy']}\")\n500 |         print(f\"Total cases processed: {report['total_cases_processed']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/advanced_data_integrity_system.py:429:11\n    |\n427 |     # Generate report\n428 |     report = validator.get_integrity_report(hours=1)\n429 |     print(f\"\ud83d\udcca Integrity Report:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n430 |     print(f\"  Success Rate: {report['statistics']['success_rate']:.1%}\")\n431 |     print(f\"  Compliance Rate: {report['statistics']['compliance_rate']:.1%}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `model_complexity` is assigned to but never used\n   --> src/advanced_error_recovery.py:471:9\n    |\n469 |         # Memory risk\n470 |         batch_size = context.get(\"batch_size\", 32)\n471 |         model_complexity = context.get(\"model_complexity\", \"medium\")\n    |         ^^^^^^^^^^^^^^^^\n472 |         \n473 |         if batch_size > 64:\n    |\nhelp: Remove assignment to unused variable `model_complexity`\n\nF841 Local variable `current_time` is assigned to but never used\n   --> src/advanced_monitoring_alerting_system.py:313:9\n    |\n312 |         anomalies = []\n313 |         current_time = datetime.now()\n    |         ^^^^^^^^^^^^\n314 |         \n315 |         # Extract numeric values and timestamps\n    |\nhelp: Remove assignment to unused variable `current_time`\n\nF841 Local variable `model` is assigned to but never used\n   --> src/advanced_monitoring_alerting_system.py:430:9\n    |\n429 |         anomalies = []\n430 |         model = self.detection_models['quantum']\n    |         ^^^^^\n431 |         \n432 |         correlation_strength = abs(quantum_correlation.get('correlation', 0))\n    |\nhelp: Remove assignment to unused variable `model`\n\nF541 [*] f-string without any placeholders\n    --> src/advanced_monitoring_alerting_system.py:1023:15\n     |\n1021 |         # Get system status\n1022 |         status = system.get_system_status()\n1023 |         print(f\"\\nMonitoring System Status:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1024 |         print(f\"System Running: {status['system_running']}\")\n1025 |         print(f\"Monitoring Cycles: {status['system_statistics']['monitoring_cycles']}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nE722 Do not use bare `except`\n   --> src/ai_driven_adaptive_optimization.py:648:17\n    |\n646 |                     action_type = action_data.get('action_type', 'unknown')\n647 |                     action_types[action_type] = action_types.get(action_type, 0) + 1\n648 |                 except:\n    |                 ^^^^^^\n649 |                     pass\n    |\n\nF541 [*] f-string without any placeholders\n   --> src/ai_driven_adaptive_optimization.py:778:11\n    |\n776 |     # Generate optimization report\n777 |     report = optimizer.generate_optimization_report(hours=1)\n778 |     print(f\"\\n\ud83d\udcca Optimization Report:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n779 |     print(f\"  Total optimizations: {report['optimization_statistics']['total_optimizations']}\")\n780 |     print(f\"  Success rate: {report['optimization_statistics']['success_rate']:.1%}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nE402 Module level import not at top of file\n   --> src/api/main.py:300:1\n    |\n298 |     )\n299 | # HIPAA Audit Middleware Enhancement\n300 | from src.monitoring.logging_config import audit_logger, audit_phi_access\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n301 |\n302 | @audit_phi_access(\"IMAGE_UPLOAD\")\n    |\n\nF811 Redefinition of unused `predict_pneumonia` from line 122\n   --> src/api/main.py:314:11\n    |\n313 | @audit_phi_access(\"PREDICTION_REQUEST\")\n314 | async def predict_pneumonia(image_path: str, user_id: str):\n    |           ^^^^^^^^^^^^^^^^^ `predict_pneumonia` redefined here\n315 |     \"\"\"Make pneumonia prediction with full audit trail.\"\"\"\n316 |     # Implementation would integrate with existing prediction logic\n    |\n   ::: src/api/main.py:122:11\n    |\n121 | @app.post(\"/predict\", response_model=PredictionResponse, tags=[\"Prediction\"])\n122 | async def predict_pneumonia(\n    |           ----------------- previous definition of `predict_pneumonia` here\n123 |     file: UploadFile = File(..., description=\"Chest X-ray image file\"),\n124 |     model_version: Optional[str] = Field(None, description=\"Specific model version to use\")\n    |\nhelp: Remove definition: `predict_pneumonia`\n\nE402 Module level import not at top of file\n   --> src/api/main.py:326:1\n    |\n325 | # HIPAA Audit Middleware Enhancement\n326 | from src.monitoring.logging_config import audit_logger, audit_phi_access\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n327 |\n328 | @audit_phi_access(\"IMAGE_UPLOAD\")\n    |\n\nF811 [*] Redefinition of unused `audit_logger` from line 300\n   --> src/api/main.py:326:43\n    |\n325 | # HIPAA Audit Middleware Enhancement\n326 | from src.monitoring.logging_config import audit_logger, audit_phi_access\n    |                                           ^^^^^^^^^^^^ `audit_logger` redefined here\n327 |\n328 | @audit_phi_access(\"IMAGE_UPLOAD\")\n    |\n   ::: src/api/main.py:300:43\n    |\n298 |     )\n299 | # HIPAA Audit Middleware Enhancement\n300 | from src.monitoring.logging_config import audit_logger, audit_phi_access\n    |                                           ------------ previous definition of `audit_logger` here\n301 |\n302 | @audit_phi_access(\"IMAGE_UPLOAD\")\n    |\nhelp: Remove definition: `audit_logger`\n\nF811 Redefinition of unused `upload_medical_image` from line 303\n   --> src/api/main.py:329:11\n    |\n328 | @audit_phi_access(\"IMAGE_UPLOAD\")\n329 | async def upload_medical_image(image_data: bytes, user_id: str):\n    |           ^^^^^^^^^^^^^^^^^^^^ `upload_medical_image` redefined here\n330 |     \"\"\"Upload medical image with HIPAA audit logging.\"\"\"\n331 |     audit_logger.log_phi_access(\n    |\n   ::: src/api/main.py:303:11\n    |\n302 | @audit_phi_access(\"IMAGE_UPLOAD\")\n303 | async def upload_medical_image(image_data: bytes, user_id: str):\n    |           -------------------- previous definition of `upload_medical_image` here\n304 |     \"\"\"Upload medical image with HIPAA audit logging.\"\"\"\n305 |     audit_logger.log_phi_access(\n    |\nhelp: Remove definition: `upload_medical_image`\n\nF811 Redefinition of unused `predict_pneumonia` from line 314\n   --> src/api/main.py:340:11\n    |\n339 | @audit_phi_access(\"PREDICTION_REQUEST\")\n340 | async def predict_pneumonia(image_path: str, user_id: str):\n    |           ^^^^^^^^^^^^^^^^^ `predict_pneumonia` redefined here\n341 |     \"\"\"Make pneumonia prediction with full audit trail.\"\"\"\n342 |     # Implementation would integrate with existing prediction logic\n    |\n   ::: src/api/main.py:314:11\n    |\n313 | @audit_phi_access(\"PREDICTION_REQUEST\")\n314 | async def predict_pneumonia(image_path: str, user_id: str):\n    |           ----------------- previous definition of `predict_pneumonia` here\n315 |     \"\"\"Make pneumonia prediction with full audit trail.\"\"\"\n316 |     # Implementation would integrate with existing prediction logic\n    |\nhelp: Remove definition: `predict_pneumonia`\n\nF841 Local variable `now` is assigned to but never used\n  --> src/caching/intelligent_cache.py:83:9\n   |\n81 |     def select_victims(self, entries: Dict[str, CacheEntry], target_count: int) -> List[str]:\n82 |         \"\"\"Select victims based on composite score of recency, frequency, and size.\"\"\"\n83 |         now = datetime.utcnow()\n   |         ^^^\n84 |         \n85 |         # Calculate scores for each entry\n   |\nhelp: Remove assignment to unused variable `now`\n\nE722 Do not use bare `except`\n   --> src/comprehensive_audit_logging_system.py:482:9\n    |\n480 |                 result = cursor.fetchone()\n481 |                 return result[0] if result else None\n482 |         except:\n    |         ^^^^^^\n483 |             return None\n    |\n\nE722 Do not use bare `except`\n   --> src/comprehensive_audit_logging_system.py:676:9\n    |\n674 |                 compliance_tags=[\"system_logging\"]\n675 |             )\n676 |         except:\n    |         ^^^^^^\n677 |             # Prevent recursive logging issues\n678 |             pass\n    |\n\nF841 Local variable `total_time` is assigned to but never used\n   --> src/comprehensive_research_validation_framework.py:588:9\n    |\n586 |         )\n587 |         \n588 |         total_time = time.time() - start_time\n    |         ^^^^^^^^^^\n589 |         \n590 |         # Extract performance metrics\n    |\nhelp: Remove assignment to unused variable `total_time`\n\nF841 Local variable `all_effect_sizes` is assigned to but never used\n   --> src/comprehensive_research_validation_framework.py:810:9\n    |\n809 |         # Calculate average effect size across comparisons\n810 |         all_effect_sizes = []\n    |         ^^^^^^^^^^^^^^^^\n811 |         \n812 |         # Simplified power analysis\n    |\nhelp: Remove assignment to unused variable `all_effect_sizes`\n\nF541 [*] f-string without any placeholders\n    --> src/comprehensive_research_validation_framework.py:1045:11\n     |\n1043 |     )\n1044 |     \n1045 |     print(f\"\ud83d\udccb Benchmark Configuration:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1046 |     print(f\"   Algorithms: {', '.join(config.algorithms)}\")\n1047 |     print(f\"   Metrics: {', '.join(config.metrics)}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/comprehensive_research_validation_framework.py:1122:15\n     |\n1120 |     power_analysis = study_results.power_analysis\n1121 |     if power_analysis:\n1122 |         print(f\"\\n\u26a1 Power Analysis:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^\n1123 |         current_power = power_analysis.get('current_power', 0)\n1124 |         adequate_power = power_analysis.get('adequate_power', False)\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/comprehensive_testing_validation_framework.py:735:15\n    |\n733 |         report = await framework.run_test_suite()\n734 |         \n735 |         print(f\"Test Results:\")\n    |               ^^^^^^^^^^^^^^^^\n736 |         print(f\"  Total Tests: {report['execution_summary']['total_tests']}\")\n737 |         print(f\"  Success Rate: {report['execution_summary']['success_rate']:.1f}%\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/comprehensive_testing_validation_framework.py:745:15\n    |\n743 |         validation_result = await framework.validate_data(test_data)\n744 |         \n745 |         print(f\"Validation Results:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n746 |         print(f\"  Status: {validation_result['overall_status']}\")\n747 |         print(f\"  Rules Passed: {validation_result['passed_rules']}/{validation_result['total_rules']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF811 Redefinition of unused `warnings` from line 17\n  --> src/comprehensive_validation.py:50:9\n   |\n48 |         score: float, \n49 |         details: Dict[str, Any] = None,\n50 |         warnings: List[str] = None,\n   |         ^^^^^^^^ `warnings` redefined here\n51 |         errors: List[str] = None\n52 |     ) -> ValidationResult:\n   |\n  ::: src/comprehensive_validation.py:17:8\n   |\n15 | import pandas as pd\n16 | from sklearn.metrics import classification_report, confusion_matrix\n17 | import warnings\n   |        -------- previous definition of `warnings` here\n18 |\n19 | logger = logging.getLogger(__name__)\n   |\nhelp: Remove definition: `warnings`\n\nF811 Redefinition of unused `warnings` from line 17\n  --> src/comprehensive_validation.py:75:9\n   |\n73 |         \"\"\"Validate data integrity.\"\"\"\n74 |         errors = []\n75 |         warnings = []\n   |         ^^^^^^^^ `warnings` redefined here\n76 |         details = {}\n77 |         score = 1.0\n   |\n  ::: src/comprehensive_validation.py:17:8\n   |\n15 | import pandas as pd\n16 | from sklearn.metrics import classification_report, confusion_matrix\n17 | import warnings\n   |        -------- previous definition of `warnings` here\n18 |\n19 | logger = logging.getLogger(__name__)\n   |\nhelp: Remove definition: `warnings`\n\nF811 Redefinition of unused `warnings` from line 17\n   --> src/comprehensive_validation.py:150:9\n    |\n148 |         \"\"\"Validate image quality.\"\"\"\n149 |         errors = []\n150 |         warnings = []\n    |         ^^^^^^^^ `warnings` redefined here\n151 |         details = {}\n152 |         score = 1.0\n    |\n   ::: src/comprehensive_validation.py:17:8\n    |\n 15 | import pandas as pd\n 16 | from sklearn.metrics import classification_report, confusion_matrix\n 17 | import warnings\n    |        -------- previous definition of `warnings` here\n 18 |\n 19 | logger = logging.getLogger(__name__)\n    |\nhelp: Remove definition: `warnings`\n\nF811 Redefinition of unused `warnings` from line 17\n   --> src/comprehensive_validation.py:226:9\n    |\n224 |         \"\"\"Validate model architecture.\"\"\"\n225 |         errors = []\n226 |         warnings = []\n    |         ^^^^^^^^ `warnings` redefined here\n227 |         details = {}\n228 |         score = 1.0\n    |\n   ::: src/comprehensive_validation.py:17:8\n    |\n 15 | import pandas as pd\n 16 | from sklearn.metrics import classification_report, confusion_matrix\n 17 | import warnings\n    |        -------- previous definition of `warnings` here\n 18 |\n 19 | logger = logging.getLogger(__name__)\n    |\nhelp: Remove definition: `warnings`\n\nF811 Redefinition of unused `warnings` from line 17\n   --> src/comprehensive_validation.py:324:9\n    |\n322 |         \"\"\"Validate training configuration.\"\"\"\n323 |         errors = []\n324 |         warnings = []\n    |         ^^^^^^^^ `warnings` redefined here\n325 |         details = {}\n326 |         score = 1.0\n    |\n   ::: src/comprehensive_validation.py:17:8\n    |\n 15 | import pandas as pd\n 16 | from sklearn.metrics import classification_report, confusion_matrix\n 17 | import warnings\n    |        -------- previous definition of `warnings` here\n 18 |\n 19 | logger = logging.getLogger(__name__)\n    |\nhelp: Remove definition: `warnings`\n\nF811 Redefinition of unused `warnings` from line 17\n   --> src/comprehensive_validation.py:417:9\n    |\n415 |         \"\"\"Validate model performance.\"\"\"\n416 |         errors = []\n417 |         warnings = []\n    |         ^^^^^^^^ `warnings` redefined here\n418 |         details = {}\n419 |         score = 1.0\n    |\n   ::: src/comprehensive_validation.py:17:8\n    |\n 15 | import pandas as pd\n 16 | from sklearn.metrics import classification_report, confusion_matrix\n 17 | import warnings\n    |        -------- previous definition of `warnings` here\n 18 |\n 19 | logger = logging.getLogger(__name__)\n    |\nhelp: Remove definition: `warnings`\n\nF811 Redefinition of unused `warnings` from line 17\n   --> src/comprehensive_validation.py:500:9\n    |\n498 |         \"\"\"Validate security aspects.\"\"\"\n499 |         errors = []\n500 |         warnings = []\n    |         ^^^^^^^^ `warnings` redefined here\n501 |         details = {}\n502 |         score = 1.0\n    |\n   ::: src/comprehensive_validation.py:17:8\n    |\n 15 | import pandas as pd\n 16 | from sklearn.metrics import classification_report, confusion_matrix\n 17 | import warnings\n    |        -------- previous definition of `warnings` here\n 18 |\n 19 | logger = logging.getLogger(__name__)\n    |\nhelp: Remove definition: `warnings`\n\nF821 Undefined name `time`\n   --> src/comprehensive_validation.py:654:31\n    |\n652 |                     warnings=[],\n653 |                     errors=[f\"Validator exception: {str(e)}\"],\n654 |                     timestamp=time.time()\n    |                               ^^^^\n655 |                 )\n656 |                 results.append(error_result)\n    |\n\nE712 Avoid equality comparisons to `True`; use `AuditLog.phi_accessed:` for truth checks\n   --> src/database/repositories.py:295:33\n    |\n294 |         if phi_only:\n295 |             query = query.where(AuditLog.phi_accessed == True)\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n296 |         \n297 |         query = query.order_by(desc(AuditLog.timestamp)).limit(limit).offset(offset)\n    |\nhelp: Replace with `AuditLog.phi_accessed`\n\nE712 Avoid equality comparisons to `True`; use `AuditLog.phi_accessed:` for truth checks\n   --> src/database/repositories.py:314:17\n    |\n312 |                 AuditLog.timestamp >= start_date,\n313 |                 AuditLog.timestamp <= end_date,\n314 |                 AuditLog.phi_accessed == True\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n315 |             )\n316 |         )\n    |\nhelp: Replace with `AuditLog.phi_accessed`\n\nE712 Avoid equality comparisons to `True`; use `UserSession.is_active:` for truth checks\n   --> src/database/repositories.py:444:21\n    |\n442 |                 and_(\n443 |                     UserSession.session_token == session_token,\n444 |                     UserSession.is_active == True\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n445 |                 )\n446 |             )\n    |\nhelp: Replace with `UserSession.is_active`\n\nE712 Avoid equality comparisons to `True`; use `UserSession.is_active:` for truth checks\n   --> src/database/repositories.py:492:21\n    |\n490 |                 and_(\n491 |                     UserSession.last_activity < expiry_time,\n492 |                     UserSession.is_active == True\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n493 |                 )\n494 |             )\n    |\nhelp: Replace with `UserSession.is_active`\n\nF541 [*] f-string without any placeholders\n   --> src/edge_computing_distributed_inference.py:867:15\n    |\n865 |             processing_modes[mode] = processing_modes.get(mode, 0) + 1\n866 |         \n867 |         print(f\"\ud83d\udcca Performance Summary:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n868 |         print(f\"  Average latency: {avg_latency:.1f}ms\")\n869 |         print(f\"  Processing modes: {processing_modes}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/edge_computing_distributed_inference.py:873:11\n    |\n871 |     # Show system status\n872 |     status = orchestrator.get_system_status()\n873 |     print(f\"\ud83d\udda5\ufe0f  System Status:\")\n    |           ^^^^^^^^^^^^^^^^^^^^\n874 |     print(f\"  Online devices: {status['devices']['online']}/{status['devices']['total']}\")\n875 |     print(f\"  System utilization: {status['capacity']['utilization_percent']:.1f}%\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `control` is assigned to but never used\n   --> src/enhanced_quantum_optimization.py:149:9\n    |\n147 |         \"\"\"Apply CNOT gate.\"\"\"\n148 |         # Simplified CNOT implementation\n149 |         control = gate[\"control\"]\n    |         ^^^^^^^\n150 |         target = gate[\"target\"]\n    |\nhelp: Remove assignment to unused variable `control`\n\nF841 Local variable `target` is assigned to but never used\n   --> src/enhanced_quantum_optimization.py:150:9\n    |\n148 |         # Simplified CNOT implementation\n149 |         control = gate[\"control\"]\n150 |         target = gate[\"target\"]\n    |         ^^^^^^\n151 |         \n152 |         # Update entanglement measure\n    |\nhelp: Remove assignment to unused variable `target`\n\nF541 [*] f-string without any placeholders\n   --> src/global_compliance_framework.py:777:19\n    |\n775 |           # Critical gaps\n776 |           if report_data[\"critical_gaps\"]:\n777 |               md += f\"\"\"## \ud83d\udea8 Critical Gaps\n    |  ___________________^\n778 | |\n779 | | \"\"\"\n    | |___^\n780 |               for gap in report_data[\"critical_gaps\"]:\n781 |                   md += f\"\"\"- **{gap['requirement_id']}**: {gap['title']} ({gap['region']})\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/global_compliance_framework.py:789:19\n    |\n787 |           # Upcoming deadlines\n788 |           if report_data[\"upcoming_deadlines\"]:\n789 |               md += f\"\"\"## \u23f0 Upcoming Deadlines\n    |  ___________________^\n790 | |\n791 | | \"\"\"\n    | |___^\n792 |               for deadline in report_data[\"upcoming_deadlines\"]:\n793 |                   md += f\"\"\"- **{deadline['requirement_id']}**: {deadline['title']}\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/global_compliance_framework.py:801:15\n    |\n800 |           # Evidence summary\n801 |           md += f\"\"\"## \ud83d\udccb Evidence Summary\n    |  _______________^\n802 | |\n803 | | \"\"\"\n    | |___^\n804 |           for evidence_type, summary in report_data[\"evidence_summary\"].items():\n805 |               md += f\"\"\"### {evidence_type.title()}\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_compliance_framework.py:1263:11\n     |\n1262 |     # Regional compliance status\n1263 |     print(f\"\\\\n\ud83d\uddfa\ufe0f Regional Compliance Status:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1264 |     for region in target_regions:\n1265 |         regional_status = compliance_manager.get_compliance_status(region)\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_compliance_framework.py:1269:11\n     |\n1268 |     # Generate compliance report\n1269 |     print(f\"\\\\n\ud83d\udccb Generating Compliance Report...\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1270 |     report = compliance_manager.generate_compliance_report(\"markdown\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_compliance_framework.py:1278:11\n     |\n1277 |     # Initialize data protection compliance\n1278 |     print(f\"\\\\n\ud83d\udd12 Data Protection Compliance:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1279 |     data_protection = DataProtectionComplianceManager([\n1280 |         DataProtectionRegulation.GDPR,\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_compliance_framework.py:1305:11\n     |\n1304 |     # Initialize internationalization\n1305 |     print(f\"\\\\n\ud83c\udf10 Internationalization Support:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1306 |     i18n = InternationalizationManager()\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_compliance_framework.py:1314:11\n     |\n1312 |         print(f\"{locale}: {requirements['regulatory_authority']} | {requirements['data_protection_law']} | {requirements['language_d\u2026\n1313 |         \n1314 |     print(f\"\\\\n\ud83c\udfaf Global Compliance Framework Demonstration Complete!\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1315 |     print(f\"\u2705 {len(compliance_manager.requirements)} compliance requirements loaded\")\n1316 |     print(f\"\u2705 {len(compliance_manager.evidence)} evidence items tracked\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1167:11\n     |\n1165 |     assessment_summary = framework.perform_compliance_assessment(profile_id)\n1166 |     \n1167 |     print(f\"\ud83d\udccb Assessment Results:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n1168 |     print(f\"   Overall compliance score: {assessment_summary['overall_compliance_score']:.3f}\")\n1169 |     print(f\"   Total requirements: {assessment_summary['total_requirements']}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1175:11\n     |\n1174 |     # Show jurisdiction-specific results\n1175 |     print(f\"\\n\ud83c\udf0d Jurisdiction-Specific Compliance:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1176 |     for jurisdiction, score in assessment_summary['jurisdiction_scores'].items():\n1177 |         status = assessment_summary['certification_status'][jurisdiction].value\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1182:15\n     |\n1180 |     # Show critical gaps\n1181 |     if assessment_summary['critical_gaps']:\n1182 |         print(f\"\\n\u26a0\ufe0f  Critical Gaps Identified:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1183 |         for gap in assessment_summary['critical_gaps'][:5]:  # Show first 5\n1184 |             print(f\"   \u2022 {gap}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1187:11\n     |\n1186 |     # Generate comprehensive report\n1187 |     print(f\"\\n\ud83d\udcc4 Generating compliance report...\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1188 |     compliance_report = framework.generate_compliance_report(profile_id)\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1195:11\n     |\n1194 |     # Export regulatory documentation\n1195 |     print(f\"\\n\ud83d\udce4 Exporting regulatory documentation...\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1196 |     output_dir = Path(\"regulatory_exports\")\n1197 |     exported_files = framework.export_regulatory_documentation(profile_id, output_dir)\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1199:11\n     |\n1197 |     exported_files = framework.export_regulatory_documentation(profile_id, output_dir)\n1198 |     \n1199 |     print(f\"   Exported files:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^\n1200 |     for file_type, file_path in exported_files.items():\n1201 |         print(f\"     {file_type}: {file_path}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1204:11\n     |\n1203 |     # Show recommendations\n1204 |     print(f\"\\n\ud83d\udca1 Key Recommendations:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1205 |     for recommendation in compliance_report['recommendations']:\n1206 |         print(f\"   \u2022 {recommendation}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1208:11\n     |\n1206 |         print(f\"   \u2022 {recommendation}\")\n1207 |     \n1208 |     print(f\"\\n\ud83d\udcc5 Next Actions:\")\n     |           ^^^^^^^^^^^^^^^^^^^^^\n1209 |     for action in compliance_report['next_actions']:\n1210 |         print(f\"   \u2022 {action}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/global_medical_compliance_framework.py:1212:11\n     |\n1210 |         print(f\"   \u2022 {action}\")\n1211 |     \n1212 |     print(f\"\\n\u2705 Global medical compliance framework demonstration complete!\")\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1213 |     print(f\"\ud83d\udcc1 Regulatory documentation exported to: {output_dir}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `gpu_details` is assigned to but never used\n   --> src/intelligent_auto_scaler.py:117:17\n    |\n115 |         try:\n116 |             if tf.config.list_physical_devices('GPU'):\n117 |                 gpu_details = tf.config.experimental.get_device_details(\n    |                 ^^^^^^^^^^^\n118 |                     tf.config.list_physical_devices('GPU')[0]\n119 |                 )\n    |\nhelp: Remove assignment to unused variable `gpu_details`\n\nE722 Do not use bare `except`\n   --> src/intelligent_auto_scaler.py:122:9\n    |\n120 |                 # This is a simplified GPU memory check\n121 |                 gpu_memory_percent = 50.0  # Placeholder\n122 |         except:\n    |         ^^^^^^\n123 |             pass\n    |\n\nF841 Local variable `pred_response` is assigned to but never used\n   --> src/intelligent_auto_scaler.py:350:13\n    |\n348 |             pred_cpu = predicted_metrics.get('cpu', current_metrics.cpu_percent)\n349 |             pred_memory = predicted_metrics.get('memory', current_metrics.memory_percent)\n350 |             pred_response = predicted_metrics.get('response_time', current_metrics.response_time)\n    |             ^^^^^^^^^^^^^\n351 |             \n352 |             if pred_cpu > self.cpu_threshold_high * 0.9:\n    |\nhelp: Remove assignment to unused variable `pred_response`\n\nF841 Local variable `report_parser` is assigned to but never used\n   --> src/medical_analytics_dashboard.py:131:5\n    |\n130 |     # Report command\n131 |     report_parser = subparsers.add_parser(\"report\", help=\"Generate analytics report\")\n    |     ^^^^^^^^^^^^^\n132 |     \n133 |     # Export command\n    |\nhelp: Remove assignment to unused variable `report_parser`\n\nF841 Local variable `stats_parser` is assigned to but never used\n   --> src/medical_analytics_dashboard.py:138:5\n    |\n137 |     # Stats command\n138 |     stats_parser = subparsers.add_parser(\"stats\", help=\"Show quick statistics\")\n    |     ^^^^^^^^^^^^\n139 |     \n140 |     # Log command for testing\n    |\nhelp: Remove assignment to unused variable `stats_parser`\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:373:1\n    |\n371 | \"\"\"\n372 |\n373 | import logging\n    | ^^^^^^^^^^^^^^\n374 | import json\n375 | from datetime import datetime, timezone\n    |\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:374:1\n    |\n373 | import logging\n374 | import json\n    | ^^^^^^^^^^^\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n    |\n\nF811 [*] Redefinition of unused `json` from line 9\n   --> src/monitoring/logging_config.py:374:8\n    |\n373 | import logging\n374 | import json\n    |        ^^^^ `json` redefined here\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n    |\n   ::: src/monitoring/logging_config.py:9:8\n    |\n  7 | import os\n  8 | import sys\n  9 | import json\n    |        ---- previous definition of `json` here\n 10 | from pathlib import Path\n 11 | from typing import Dict, Any, Optional\n    |\nhelp: Remove definition: `json`\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:375:1\n    |\n373 | import logging\n374 | import json\n375 | from datetime import datetime, timezone\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n376 | from typing import Dict, Any, Optional\n377 | from functools import wraps\n    |\n\nF811 [*] Redefinition of unused `datetime` from line 13\n   --> src/monitoring/logging_config.py:375:22\n    |\n373 | import logging\n374 | import json\n375 | from datetime import datetime, timezone\n    |                      ^^^^^^^^ `datetime` redefined here\n376 | from typing import Dict, Any, Optional\n377 | from functools import wraps\n    |\n   ::: src/monitoring/logging_config.py:13:22\n    |\n 11 | from typing import Dict, Any, Optional\n 12 | import traceback\n 13 | from datetime import datetime\n    |                      -------- previous definition of `datetime` here\n    |\nhelp: Remove definition: `datetime`\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:376:1\n    |\n374 | import json\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n377 | from functools import wraps\n    |\n\nF811 [*] Redefinition of unused `Dict` from line 11\n   --> src/monitoring/logging_config.py:376:20\n    |\n374 | import json\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n    |                    ^^^^ `Dict` redefined here\n377 | from functools import wraps\n    |\n   ::: src/monitoring/logging_config.py:11:20\n    |\n  9 | import json\n 10 | from pathlib import Path\n 11 | from typing import Dict, Any, Optional\n    |                    ---- previous definition of `Dict` here\n 12 | import traceback\n 13 | from datetime import datetime\n    |\nhelp: Remove definition: `Dict`\n\nF811 [*] Redefinition of unused `Any` from line 11\n   --> src/monitoring/logging_config.py:376:26\n    |\n374 | import json\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n    |                          ^^^ `Any` redefined here\n377 | from functools import wraps\n    |\n   ::: src/monitoring/logging_config.py:11:26\n    |\n  9 | import json\n 10 | from pathlib import Path\n 11 | from typing import Dict, Any, Optional\n    |                          --- previous definition of `Any` here\n 12 | import traceback\n 13 | from datetime import datetime\n    |\nhelp: Remove definition: `Any`\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:377:1\n    |\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n377 | from functools import wraps\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:475:1\n    |\n473 | \"\"\"\n474 |\n475 | import logging\n    | ^^^^^^^^^^^^^^\n476 | import json\n477 | from datetime import datetime, timezone\n    |\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:476:1\n    |\n475 | import logging\n476 | import json\n    | ^^^^^^^^^^^\n477 | from datetime import datetime, timezone\n478 | from typing import Dict, Any, Optional\n    |\n\nF811 [*] Redefinition of unused `json` from line 374\n   --> src/monitoring/logging_config.py:476:8\n    |\n475 | import logging\n476 | import json\n    |        ^^^^ `json` redefined here\n477 | from datetime import datetime, timezone\n478 | from typing import Dict, Any, Optional\n    |\n   ::: src/monitoring/logging_config.py:374:8\n    |\n373 | import logging\n374 | import json\n    |        ---- previous definition of `json` here\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n    |\nhelp: Remove definition: `json`\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:477:1\n    |\n475 | import logging\n476 | import json\n477 | from datetime import datetime, timezone\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n478 | from typing import Dict, Any, Optional\n479 | from functools import wraps\n    |\n\nF811 [*] Redefinition of unused `datetime` from line 375\n   --> src/monitoring/logging_config.py:477:22\n    |\n475 | import logging\n476 | import json\n477 | from datetime import datetime, timezone\n    |                      ^^^^^^^^ `datetime` redefined here\n478 | from typing import Dict, Any, Optional\n479 | from functools import wraps\n    |\n   ::: src/monitoring/logging_config.py:375:22\n    |\n373 | import logging\n374 | import json\n375 | from datetime import datetime, timezone\n    |                      -------- previous definition of `datetime` here\n376 | from typing import Dict, Any, Optional\n377 | from functools import wraps\n    |\nhelp: Remove definition: `datetime`\n\nF811 [*] Redefinition of unused `timezone` from line 375\n   --> src/monitoring/logging_config.py:477:32\n    |\n475 | import logging\n476 | import json\n477 | from datetime import datetime, timezone\n    |                                ^^^^^^^^ `timezone` redefined here\n478 | from typing import Dict, Any, Optional\n479 | from functools import wraps\n    |\n   ::: src/monitoring/logging_config.py:375:32\n    |\n373 | import logging\n374 | import json\n375 | from datetime import datetime, timezone\n    |                                -------- previous definition of `timezone` here\n376 | from typing import Dict, Any, Optional\n377 | from functools import wraps\n    |\nhelp: Remove definition: `timezone`\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:478:1\n    |\n476 | import json\n477 | from datetime import datetime, timezone\n478 | from typing import Dict, Any, Optional\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n479 | from functools import wraps\n    |\n\nE402 Module level import not at top of file\n   --> src/monitoring/logging_config.py:479:1\n    |\n477 | from datetime import datetime, timezone\n478 | from typing import Dict, Any, Optional\n479 | from functools import wraps\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nF811 [*] Redefinition of unused `wraps` from line 377\n   --> src/monitoring/logging_config.py:479:23\n    |\n477 | from datetime import datetime, timezone\n478 | from typing import Dict, Any, Optional\n479 | from functools import wraps\n    |                       ^^^^^ `wraps` redefined here\n    |\n   ::: src/monitoring/logging_config.py:377:23\n    |\n375 | from datetime import datetime, timezone\n376 | from typing import Dict, Any, Optional\n377 | from functools import wraps\n    |                       ----- previous definition of `wraps` here\n    |\nhelp: Remove definition: `wraps`\n\nF811 Redefinition of unused `audit_phi_access` from line 448\n   --> src/monitoring/logging_config.py:550:5\n    |\n550 | def audit_phi_access(action: str):\n    |     ^^^^^^^^^^^^^^^^ `audit_phi_access` redefined here\n551 |     \"\"\"Decorator for automatic PHI access audit logging.\"\"\"\n552 |     def decorator(func):\n    |\n   ::: src/monitoring/logging_config.py:448:5\n    |\n448 | def audit_phi_access(action: str):\n    |     ---------------- previous definition of `audit_phi_access` here\n449 |     \"\"\"Decorator for automatic PHI access audit logging.\"\"\"\n450 |     def decorator(func):\n    |\nhelp: Remove definition: `audit_phi_access`\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:246:22\n    |\n244 |         # Model metrics\n245 |         model = metrics['model']\n246 |         lines.append(f'# HELP pneumonia_detector_inference_total Total number of inferences')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n247 |         lines.append(f'# TYPE pneumonia_detector_inference_total counter')\n248 |         lines.append(f'pneumonia_detector_inference_total {model[\"inference_count\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:247:22\n    |\n245 |         model = metrics['model']\n246 |         lines.append(f'# HELP pneumonia_detector_inference_total Total number of inferences')\n247 |         lines.append(f'# TYPE pneumonia_detector_inference_total counter')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n248 |         lines.append(f'pneumonia_detector_inference_total {model[\"inference_count\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:250:22\n    |\n248 |         lines.append(f'pneumonia_detector_inference_total {model[\"inference_count\"]}')\n249 |         \n250 |         lines.append(f'# HELP pneumonia_detector_inference_duration_seconds Inference duration')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n251 |         lines.append(f'# TYPE pneumonia_detector_inference_duration_seconds summary')\n252 |         lines.append(f'pneumonia_detector_inference_duration_seconds_sum {model[\"inference_time_total\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:251:22\n    |\n250 |         lines.append(f'# HELP pneumonia_detector_inference_duration_seconds Inference duration')\n251 |         lines.append(f'# TYPE pneumonia_detector_inference_duration_seconds summary')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n252 |         lines.append(f'pneumonia_detector_inference_duration_seconds_sum {model[\"inference_time_total\"]}')\n253 |         lines.append(f'pneumonia_detector_inference_duration_seconds_count {model[\"inference_count\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:260:22\n    |\n258 |                 lines.append(f'pneumonia_detector_inference_duration_seconds{{quantile=\"{quantile}\"}} {value}')\n259 |         \n260 |         lines.append(f'# HELP pneumonia_detector_errors_total Total number of errors')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n261 |         lines.append(f'# TYPE pneumonia_detector_errors_total counter')\n262 |         lines.append(f'pneumonia_detector_errors_total {model[\"error_count\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:261:22\n    |\n260 |         lines.append(f'# HELP pneumonia_detector_errors_total Total number of errors')\n261 |         lines.append(f'# TYPE pneumonia_detector_errors_total counter')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n262 |         lines.append(f'pneumonia_detector_errors_total {model[\"error_count\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:266:22\n    |\n264 |         # System metrics\n265 |         system = metrics['system']\n266 |         lines.append(f'# HELP pneumonia_detector_cpu_percent CPU usage percentage')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n267 |         lines.append(f'# TYPE pneumonia_detector_cpu_percent gauge')\n268 |         lines.append(f'pneumonia_detector_cpu_percent {system[\"cpu_percent\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:267:22\n    |\n265 |         system = metrics['system']\n266 |         lines.append(f'# HELP pneumonia_detector_cpu_percent CPU usage percentage')\n267 |         lines.append(f'# TYPE pneumonia_detector_cpu_percent gauge')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n268 |         lines.append(f'pneumonia_detector_cpu_percent {system[\"cpu_percent\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:270:22\n    |\n268 |         lines.append(f'pneumonia_detector_cpu_percent {system[\"cpu_percent\"]}')\n269 |         \n270 |         lines.append(f'# HELP pneumonia_detector_memory_percent Memory usage percentage')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n271 |         lines.append(f'# TYPE pneumonia_detector_memory_percent gauge')\n272 |         lines.append(f'pneumonia_detector_memory_percent {system[\"memory_percent\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:271:22\n    |\n270 |         lines.append(f'# HELP pneumonia_detector_memory_percent Memory usage percentage')\n271 |         lines.append(f'# TYPE pneumonia_detector_memory_percent gauge')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n272 |         lines.append(f'pneumonia_detector_memory_percent {system[\"memory_percent\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:274:22\n    |\n272 |         lines.append(f'pneumonia_detector_memory_percent {system[\"memory_percent\"]}')\n273 |         \n274 |         lines.append(f'# HELP pneumonia_detector_memory_used_bytes Memory used in bytes')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n275 |         lines.append(f'# TYPE pneumonia_detector_memory_used_bytes gauge')\n276 |         lines.append(f'pneumonia_detector_memory_used_bytes {system[\"memory_used_mb\"] * 1024 * 1024}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:275:22\n    |\n274 |         lines.append(f'# HELP pneumonia_detector_memory_used_bytes Memory used in bytes')\n275 |         lines.append(f'# TYPE pneumonia_detector_memory_used_bytes gauge')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n276 |         lines.append(f'pneumonia_detector_memory_used_bytes {system[\"memory_used_mb\"] * 1024 * 1024}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:280:22\n    |\n278 |         # Application metrics\n279 |         app = metrics['application']\n280 |         lines.append(f'# HELP pneumonia_detector_uptime_seconds Application uptime')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n281 |         lines.append(f'# TYPE pneumonia_detector_uptime_seconds counter')\n282 |         lines.append(f'pneumonia_detector_uptime_seconds {app[\"uptime_seconds\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:281:22\n    |\n279 |         app = metrics['application']\n280 |         lines.append(f'# HELP pneumonia_detector_uptime_seconds Application uptime')\n281 |         lines.append(f'# TYPE pneumonia_detector_uptime_seconds counter')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n282 |         lines.append(f'pneumonia_detector_uptime_seconds {app[\"uptime_seconds\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:284:22\n    |\n282 |         lines.append(f'pneumonia_detector_uptime_seconds {app[\"uptime_seconds\"]}')\n283 |         \n284 |         lines.append(f'# HELP pneumonia_detector_requests_total Total number of requests')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n285 |         lines.append(f'# TYPE pneumonia_detector_requests_total counter')\n286 |         lines.append(f'pneumonia_detector_requests_total {app[\"requests_total\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/monitoring/metrics.py:285:22\n    |\n284 |         lines.append(f'# HELP pneumonia_detector_requests_total Total number of requests')\n285 |         lines.append(f'# TYPE pneumonia_detector_requests_total counter')\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n286 |         lines.append(f'pneumonia_detector_requests_total {app[\"requests_total\"]}')\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `resource_usage` is assigned to but never used\n   --> src/neural_quantum_optimizer.py:278:9\n    |\n277 |         current_time = datetime.now()\n278 |         resource_usage = {'cpu': 0, 'memory': 0, 'gpu': 0, 'network': 0}\n    |         ^^^^^^^^^^^^^^\n279 |         \n280 |         for pred in sorted_predictions:\n    |\nhelp: Remove assignment to unused variable `resource_usage`\n\nF841 Local variable `num_neurons` is assigned to but never used\n   --> src/neuromorphic_edge_inference.py:483:9\n    |\n482 |         num_spikes = len(spikes)\n483 |         num_neurons = len(self.snn.neurons)\n    |         ^^^^^^^^^^^\n484 |         \n485 |         # Estimate operations (simplified)\n    |\nhelp: Remove assignment to unused variable `num_neurons`\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference.py:856:11\n    |\n854 |     # Performance metrics\n855 |     metrics = edge_engine.get_performance_metrics()\n856 |     print(f\"\\\\nPerformance Summary:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n857 |     print(f\"Average Inference Time: {metrics.get('average_inference_time_ms', 0):.1f} ms\")\n858 |     print(f\"Average Power: {metrics.get('average_power_consumption_mw', 0):.1f} mW\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference_system.py:927:11\n    |\n926 |     # Show device details\n927 |     print(f\"\\n\ud83d\udd0d Device Details:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n928 |     for device_id, device_info in status['device_status'].items():\n929 |         print(f\"   {device_id}: {device_info['device_type']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference_system.py:936:11\n    |\n935 |     # Demonstrate individual neuromorphic inference\n936 |     print(f\"\\n\ud83e\udde0 Demonstrating neuromorphic inference...\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n937 |     \n938 |     # Create a neuromorphic inference engine\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference_system.py:952:11\n    |\n950 |     power_budget = 1000.0  # 1W\n951 |     \n952 |     print(f\"   \ud83d\udd2c Running inference on test image...\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n953 |     print(f\"   \u26a1 Power budget: {power_budget}mW\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference_system.py:957:11\n    |\n955 |     result = inference_engine.perform_inference(test_image, power_budget)\n956 |     \n957 |     print(f\"   \ud83d\udccb Results:\")\n    |           ^^^^^^^^^^^^^^^^^\n958 |     print(f\"     \u2022 Prediction: {result['prediction']['class']}\")\n959 |     print(f\"     \u2022 Confidence: {result['confidence']:.3f}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference_system.py:967:11\n    |\n966 |     # Stop processing system\n967 |     print(f\"\\n\ud83d\uded1 Stopping edge processing system...\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n968 |     device_manager.stop_processing()\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/neuromorphic_edge_inference_system.py:970:11\n    |\n968 |     device_manager.stop_processing()\n969 |     \n970 |     print(f\"\\n\u2705 Neuromorphic edge inference system demonstration complete!\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n971 |     return True\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `predictions` is assigned to but never used\n   --> src/optimization/adaptive_performance_optimizer.py:403:13\n    |\n401 |             # Benchmark inference time\n402 |             start_time = time.time()\n403 |             predictions = model.predict(test_data, verbose=0)\n    |             ^^^^^^^^^^^\n404 |             end_time = time.time()\n    |\nhelp: Remove assignment to unused variable `predictions`\n\nF841 Local variable `memory_increase` is assigned to but never used\n   --> src/optimization/adaptive_performance_optimizer.py:482:21\n    |\n480 |                     # Check memory usage after inference\n481 |                     peak_memory = psutil.virtual_memory().percent\n482 |                     memory_increase = peak_memory - initial_memory\n    |                     ^^^^^^^^^^^^^^^\n483 |                     \n484 |                     # Skip if memory usage is too high\n    |\nhelp: Remove assignment to unused variable `memory_increase`\n\nE722 Do not use bare `except`\n   --> src/optimization/adaptive_scaling.py:112:21\n    |\n110 |                             gpu_usage = gpu.load * 100\n111 |                             gpu_memory = (gpu.memoryUsed / gpu.memoryTotal) * 100\n112 |                     except:\n    |                     ^^^^^^\n113 |                         pass\n    |\n\nF821 Undefined name `hashlib`\n   --> src/optimization/model_acceleration.py:264:16\n    |\n262 |     def _hash_input(self, input_data: np.ndarray) -> str:\n263 |         \"\"\"Generate hash for input data.\"\"\"\n264 |         return hashlib.sha256(input_data.tobytes()).hexdigest()[:16]\n    |                ^^^^^^^\n265 |     \n266 |     def get(self, input_data: np.ndarray) -> Optional[np.ndarray]:\n    |\n\nE722 Do not use bare `except`\n   --> src/optimization/model_acceleration.py:394:9\n    |\n392 |             if GPUtil.getGPUs():\n393 |                 gpu_utilization = GPUtil.getGPUs()[0].load * 100\n394 |         except:\n    |         ^^^^^^\n395 |             pass\n    |\n\nF541 [*] f-string without any placeholders\n   --> src/optimization/model_acceleration.py:612:11\n    |\n610 |     results = optimizer.optimize_model(model, (X_val, y_val))\n611 |     \n612 |     print(f\"Optimization Results:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n613 |     print(f\"- Original model size: {results['original_model_size']:.2f} MB\")\n614 |     print(f\"- Optimized model size: {results['optimized_model_size']:.2f} MB\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `quantum_state` is assigned to but never used\n  --> src/quantum_inspired_task_planner/advanced_quantum_medical_optimizer.py:50:9\n   |\n49 |         # Initialize quantum state for parameter search\n50 |         quantum_state = self._initialize_quantum_parameter_state(parameter_space)\n   |         ^^^^^^^^^^^^^\n51 |         \n52 |         # Quantum-enhanced differential evolution with medical constraints\n   |\nhelp: Remove assignment to unused variable `quantum_state`\n\nF841 Local variable `n_features` is assigned to but never used\n   --> src/quantum_inspired_task_planner/advanced_quantum_medical_optimizer.py:291:9\n    |\n290 |         # Quantum superposition of feature combinations\n291 |         n_features = len(feature_importance)\n    |         ^^^^^^^^^^\n292 |         feature_scores = feature_importance * medical_relevance\n    |\nhelp: Remove assignment to unused variable `n_features`\n\nF821 Undefined name `functools`\n   --> src/quantum_inspired_task_planner/caching.py:575:10\n    |\n573 |     \"\"\"Decorator for caching quantum operation results.\"\"\"\n574 |     def decorator(func: Callable) -> Callable:\n575 |         @functools.wraps(func)\n    |          ^^^^^^^^^\n576 |         def wrapper(*args, **kwargs):\n577 |             # Generate cache key\n    |\n\nE722 Do not use bare `except`\n   --> src/quantum_inspired_task_planner/performance_optimizer.py:209:9\n    |\n207 |         try:\n208 |             return len(json.dumps(value, default=str))\n209 |         except:\n    |         ^^^^^^\n210 |             return 1000  # Default estimate\n    |\n\nE722 Do not use bare `except`\n   --> src/quantum_inspired_task_planner/robust_api.py:228:17\n    |\n226 |                     }\n227 |                     status_filter = status_map.get(status.lower())\n228 |                 except:\n    |                 ^^^^^^\n229 |                     pass\n    |\n\nF821 Undefined name `Tuple`\n  --> src/quantum_inspired_task_planner/scaling.py:55:33\n   |\n53 |         self.current_instances = min_instances\n54 |         self.scaling_history: List[ScalingDecision] = []\n55 |         self.load_history: List[Tuple[datetime, float]] = []\n   |                                 ^^^^^\n56 |         self.metrics_collector = QuantumMetricsCollector()\n   |\n\nF541 [*] f-string without any placeholders\n   --> src/quantum_inspired_task_planner/simple_test.py:168:11\n    |\n166 |             print(f\"\u2717 {test_name} FAILED\")\n167 |     \n168 |     print(f\"\\n\" + \"=\" * 50)\n    |           ^^^^^\n169 |     print(f\"Test Results: {passed}/{total} passed\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/quantum_medical_fusion_engine.py:366:11\n    |\n364 |     # Generate report\n365 |     report = engine.generate_medical_report(results)\n366 |     print(f\"\\n\ud83d\udccb Clinical Summary:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n367 |     print(f\"Total cases analyzed: {report['total_cases']}\")\n368 |     print(f\"Pneumonia cases detected: {report['pneumonia_detected']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/quantum_medical_fusion_engine.py:374:11\n    |\n372 |     # Performance metrics\n373 |     metrics = engine.get_performance_metrics()\n374 |     print(f\"\\n\u26a1 Performance Metrics:\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n375 |     print(f\"Average processing time: {metrics['avg_processing_time']:.3f}s per image\")\n376 |     print(f\"Total images processed: {metrics['total_images_processed']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/quantum_medical_fusion_engine.py:381:15\n    |\n379 |     # Clinical recommendations\n380 |     if report['clinical_recommendations']:\n381 |         print(f\"\\n\ud83d\udc68\u2695\ufe0f Clinical Recommendations:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n382 |         for rec in report['clinical_recommendations']:\n383 |             print(f\"\u2022 {rec}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `regional_infrastructure` is assigned to but never used\n   --> src/quantum_medical_production_orchestrator.py:582:9\n    |\n580 |                                           config: DeploymentConfiguration) -> Dict[str, Any]:\n581 |         \"\"\"Deploy applications in specific region.\"\"\"\n582 |         regional_infrastructure = self.infrastructure_state[region]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n583 |         \n584 |         # Deploy core components\n    |\nhelp: Remove assignment to unused variable `regional_infrastructure`\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1112:15\n     |\n1110 |         )\n1111 |         \n1112 |         print(f\"\ud83c\udf0d Production Deployment Configuration:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1113 |         print(f\"  Deployment ID: {deployment_config.deployment_id}\")\n1114 |         print(f\"  Version: {deployment_config.version}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1120:15\n     |\n1119 |         # Execute production deployment\n1120 |         print(f\"\\n\u26a1 Starting global production deployment...\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1121 |         start_time = time.time()\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1130:15\n     |\n1128 |         final_status = orchestrator.get_deployment_status(deployment_id)\n1129 |         \n1130 |         print(f\"\\n\u2705 Production Deployment Completed!\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1131 |         print(f\"  Deployment Time: {deployment_time:.1f} seconds\")\n1132 |         print(f\"  Status: {final_status['status'].upper()}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1137:15\n     |\n1136 |         # Display regional health status\n1137 |         print(f\"\\n\ud83c\udfe5 Regional Health Status:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1138 |         for region, health in final_status['health_status'].items():\n1139 |             health_emoji = \"\u2705\" if health == \"healthy\" else \"\u274c\"\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1144:19\n     |\n1142 |         # Display key metrics\n1143 |         if final_status['metrics']:\n1144 |             print(f\"\\n\ud83d\udcca Key Production Metrics:\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1145 |             for metric, value in list(final_status['metrics'].items())[:6]:\n1146 |                 print(f\"  {metric}: {value:.3f}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1151:15\n     |\n1149 |         overview = orchestrator.get_production_overview()\n1150 |         \n1151 |         print(f\"\\n\ud83c\udf10 Production System Overview:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1152 |         print(f\"  Global Status: {overview['global_deployment_status'].upper()}\")\n1153 |         print(f\"  Total Deployments: {overview['total_deployments']}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1160:15\n     |\n1159 |         # Display compliance status\n1160 |         print(f\"\\n\ud83d\udccb Global Compliance Status:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1161 |         for region in overview.get('compliance_regions', []):\n1162 |             print(f\"  \u2705 {region.value}: Active\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1164:15\n     |\n1162 |             print(f\"  \u2705 {region.value}: Active\")\n1163 |         \n1164 |         print(f\"\\n\ud83c\udfaf Production Features Deployed:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1165 |         print(f\"  \u2705 Multi-region quantum-medical AI system\")\n1166 |         print(f\"  \u2705 Automated compliance validation (HIPAA, GDPR, PDPA)\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1165:15\n     |\n1164 |         print(f\"\\n\ud83c\udfaf Production Features Deployed:\")\n1165 |         print(f\"  \u2705 Multi-region quantum-medical AI system\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1166 |         print(f\"  \u2705 Automated compliance validation (HIPAA, GDPR, PDPA)\")\n1167 |         print(f\"  \u2705 Blue-green/canary deployment strategies\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1166:15\n     |\n1164 |         print(f\"\\n\ud83c\udfaf Production Features Deployed:\")\n1165 |         print(f\"  \u2705 Multi-region quantum-medical AI system\")\n1166 |         print(f\"  \u2705 Automated compliance validation (HIPAA, GDPR, PDPA)\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1167 |         print(f\"  \u2705 Blue-green/canary deployment strategies\")\n1168 |         print(f\"  \u2705 Comprehensive health monitoring\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1167:15\n     |\n1165 |         print(f\"  \u2705 Multi-region quantum-medical AI system\")\n1166 |         print(f\"  \u2705 Automated compliance validation (HIPAA, GDPR, PDPA)\")\n1167 |         print(f\"  \u2705 Blue-green/canary deployment strategies\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1168 |         print(f\"  \u2705 Comprehensive health monitoring\")\n1169 |         print(f\"  \u2705 Auto-scaling and load balancing\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1168:15\n     |\n1166 |         print(f\"  \u2705 Automated compliance validation (HIPAA, GDPR, PDPA)\")\n1167 |         print(f\"  \u2705 Blue-green/canary deployment strategies\")\n1168 |         print(f\"  \u2705 Comprehensive health monitoring\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1169 |         print(f\"  \u2705 Auto-scaling and load balancing\")\n1170 |         print(f\"  \u2705 Enterprise security and encryption\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1169:15\n     |\n1167 |         print(f\"  \u2705 Blue-green/canary deployment strategies\")\n1168 |         print(f\"  \u2705 Comprehensive health monitoring\")\n1169 |         print(f\"  \u2705 Auto-scaling and load balancing\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1170 |         print(f\"  \u2705 Enterprise security and encryption\")\n1171 |         print(f\"  \u2705 Disaster recovery capabilities\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1170:15\n     |\n1168 |         print(f\"  \u2705 Comprehensive health monitoring\")\n1169 |         print(f\"  \u2705 Auto-scaling and load balancing\")\n1170 |         print(f\"  \u2705 Enterprise security and encryption\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1171 |         print(f\"  \u2705 Disaster recovery capabilities\")\n1172 |         print(f\"  \u2705 Real-time metrics and alerting\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1171:15\n     |\n1169 |         print(f\"  \u2705 Auto-scaling and load balancing\")\n1170 |         print(f\"  \u2705 Enterprise security and encryption\")\n1171 |         print(f\"  \u2705 Disaster recovery capabilities\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1172 |         print(f\"  \u2705 Real-time metrics and alerting\")\n1173 |         print(f\"  \u2705 Quantum processor orchestration\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1172:15\n     |\n1170 |         print(f\"  \u2705 Enterprise security and encryption\")\n1171 |         print(f\"  \u2705 Disaster recovery capabilities\")\n1172 |         print(f\"  \u2705 Real-time metrics and alerting\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1173 |         print(f\"  \u2705 Quantum processor orchestration\")\n1174 |         print(f\"  \u2705 Medical AI quality assurance\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1173:15\n     |\n1171 |         print(f\"  \u2705 Disaster recovery capabilities\")\n1172 |         print(f\"  \u2705 Real-time metrics and alerting\")\n1173 |         print(f\"  \u2705 Quantum processor orchestration\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1174 |         print(f\"  \u2705 Medical AI quality assurance\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1174:15\n     |\n1172 |         print(f\"  \u2705 Real-time metrics and alerting\")\n1173 |         print(f\"  \u2705 Quantum processor orchestration\")\n1174 |         print(f\"  \u2705 Medical AI quality assurance\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1175 |         \n1176 |         # Display SLA commitments\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1177:15\n     |\n1176 |         # Display SLA commitments\n1177 |         print(f\"\\n\ud83d\udcc8 Production SLA Commitments:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1178 |         print(f\"  \ud83c\udfaf Availability: 99.9% (8.77 hours/year downtime)\")\n1179 |         print(f\"  \u26a1 Response Time P95: < 2.0 seconds\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1178:15\n     |\n1176 |         # Display SLA commitments\n1177 |         print(f\"\\n\ud83d\udcc8 Production SLA Commitments:\")\n1178 |         print(f\"  \ud83c\udfaf Availability: 99.9% (8.77 hours/year downtime)\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1179 |         print(f\"  \u26a1 Response Time P95: < 2.0 seconds\")\n1180 |         print(f\"  \ud83d\udee1\ufe0f Error Rate: < 0.1%\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1179:15\n     |\n1177 |         print(f\"\\n\ud83d\udcc8 Production SLA Commitments:\")\n1178 |         print(f\"  \ud83c\udfaf Availability: 99.9% (8.77 hours/year downtime)\")\n1179 |         print(f\"  \u26a1 Response Time P95: < 2.0 seconds\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1180 |         print(f\"  \ud83d\udee1\ufe0f Error Rate: < 0.1%\")\n1181 |         print(f\"  \ud83d\udd12 Security Incidents: Zero tolerance\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1180:15\n     |\n1178 |         print(f\"  \ud83c\udfaf Availability: 99.9% (8.77 hours/year downtime)\")\n1179 |         print(f\"  \u26a1 Response Time P95: < 2.0 seconds\")\n1180 |         print(f\"  \ud83d\udee1\ufe0f Error Rate: < 0.1%\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n1181 |         print(f\"  \ud83d\udd12 Security Incidents: Zero tolerance\")\n1182 |         print(f\"  \ud83d\udcca Quantum Coherence: > 80%\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1181:15\n     |\n1179 |         print(f\"  \u26a1 Response Time P95: < 2.0 seconds\")\n1180 |         print(f\"  \ud83d\udee1\ufe0f Error Rate: < 0.1%\")\n1181 |         print(f\"  \ud83d\udd12 Security Incidents: Zero tolerance\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1182 |         print(f\"  \ud83d\udcca Quantum Coherence: > 80%\")\n1183 |         print(f\"  \ud83c\udfe5 Medical Accuracy: > 90%\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1182:15\n     |\n1180 |         print(f\"  \ud83d\udee1\ufe0f Error Rate: < 0.1%\")\n1181 |         print(f\"  \ud83d\udd12 Security Incidents: Zero tolerance\")\n1182 |         print(f\"  \ud83d\udcca Quantum Coherence: > 80%\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1183 |         print(f\"  \ud83c\udfe5 Medical Accuracy: > 90%\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_production_orchestrator.py:1183:15\n     |\n1181 |         print(f\"  \ud83d\udd12 Security Incidents: Zero tolerance\")\n1182 |         print(f\"  \ud83d\udcca Quantum Coherence: > 80%\")\n1183 |         print(f\"  \ud83c\udfe5 Medical Accuracy: > 90%\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1184 |         \n1185 |     except Exception as e:\n     |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `workload_id` is assigned to but never used\n   --> src/quantum_medical_quality_assurance.py:401:17\n    |\n399 |             try:\n400 |                 # Submit workload to orchestrator\n401 |                 workload_id = await self.orchestrator.submit_medical_workload(\n    |                 ^^^^^^^^^^^\n402 |                     patient_data=[(image, metadata)],\n403 |                     security_context=security_context,\n    |\nhelp: Remove assignment to unused variable `workload_id`\n\nF841 Local variable `result` is assigned to but never used\n   --> src/quantum_medical_quality_assurance.py:455:17\n    |\n453 |                 )\n454 |                 \n455 |                 result = await self.robust_framework.secure_medical_processing(\n    |                 ^^^^^^\n456 |                     session_id=session_id,\n457 |                     image_data=image,\n    |\nhelp: Remove assignment to unused variable `result`\n\nF841 Local variable `workload_id` is assigned to but never used\n   --> src/quantum_medical_quality_assurance.py:807:21\n    |\n805 |                 start_time = time.time()\n806 |                 try:\n807 |                     workload_id = await self.orchestrator.submit_medical_workload(\n    |                     ^^^^^^^^^^^\n808 |                         patient_data=[(image, metadata)],\n809 |                         security_context=security_context,\n    |\nhelp: Remove assignment to unused variable `workload_id`\n\nF841 [*] Local variable `e` is assigned to but never used\n   --> src/quantum_medical_quality_assurance.py:819:37\n    |\n817 |                     results.append({\"success\": True, \"response_time\": response_time})\n818 |                     \n819 |                 except Exception as e:\n    |                                     ^\n820 |                     response_time = time.time() - start_time\n821 |                     results.append({\"success\": False, \"response_time\": response_time})\n    |\nhelp: Remove assignment to unused variable `e`\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1262:15\n     |\n1260 |         overall_status = \"PASSED\" if passed_gates == len(gate_results) and overall_score >= 0.8 else \"FAILED\"\n1261 |         \n1262 |         print(f\"\\n\ud83d\udcc8 Overall Results:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^\n1263 |         print(f\"  Status: {overall_status}\")\n1264 |         print(f\"  Overall Score: {overall_score:.3f}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1272:19\n     |\n1271 |         if qa_report.get(\"status\") != \"no_tests_executed\":\n1272 |             print(f\"\\n\ud83d\udccb Quality Assurance Summary:\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1273 |             summary = qa_report[\"summary\"]\n1274 |             print(f\"  Total Test Suites: {summary['total_test_suites']}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1286:19\n     |\n1284 |             # Compliance status\n1285 |             compliance = qa_report.get(\"compliance_status\", {})\n1286 |             print(f\"\\n\ud83c\udfe5 Compliance Status:\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n1287 |             for standard, status in compliance.items():\n1288 |                 status_emoji = \"\u2705\" if status == \"compliant\" else \"\ud83d\udfe1\" if status in [\"under_review\", \"pending\"] else \"\u274c\"\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1294:23\n     |\n1292 |             recommendations = qa_report.get(\"recommendations\", [])\n1293 |             if recommendations:\n1294 |                 print(f\"\\n\ud83d\udca1 Priority Recommendations:\")\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1295 |                 for i, rec in enumerate(recommendations[:3], 1):\n1296 |                     print(f\"  {i}. [{rec['priority'].upper()}] {rec['recommendation']}\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1299:15\n     |\n1298 |         # Display test data summary\n1299 |         print(f\"\\n\ud83e\uddec Test Data Summary:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n1300 |         for dataset_name, cases in qa_framework.test_datasets.items():\n1301 |             print(f\"  {dataset_name:20} | {len(cases):3d} cases\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1303:15\n     |\n1301 |             print(f\"  {dataset_name:20} | {len(cases):3d} cases\")\n1302 |         \n1303 |         print(f\"\\n\ud83c\udfaf Quality Assurance Features Demonstrated:\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1304 |         print(f\"  \u2705 Comprehensive multi-layer quality gates\")\n1305 |         print(f\"  \u2705 Medical validation against regulatory standards\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1304:15\n     |\n1303 |         print(f\"\\n\ud83c\udfaf Quality Assurance Features Demonstrated:\")\n1304 |         print(f\"  \u2705 Comprehensive multi-layer quality gates\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1305 |         print(f\"  \u2705 Medical validation against regulatory standards\")\n1306 |         print(f\"  \u2705 Security and compliance testing\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1305:15\n     |\n1303 |         print(f\"\\n\ud83c\udfaf Quality Assurance Features Demonstrated:\")\n1304 |         print(f\"  \u2705 Comprehensive multi-layer quality gates\")\n1305 |         print(f\"  \u2705 Medical validation against regulatory standards\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1306 |         print(f\"  \u2705 Security and compliance testing\")\n1307 |         print(f\"  \u2705 Performance and load testing\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1306:15\n     |\n1304 |         print(f\"  \u2705 Comprehensive multi-layer quality gates\")\n1305 |         print(f\"  \u2705 Medical validation against regulatory standards\")\n1306 |         print(f\"  \u2705 Security and compliance testing\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1307 |         print(f\"  \u2705 Performance and load testing\")\n1308 |         print(f\"  \u2705 Quantum coherence validation\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1307:15\n     |\n1305 |         print(f\"  \u2705 Medical validation against regulatory standards\")\n1306 |         print(f\"  \u2705 Security and compliance testing\")\n1307 |         print(f\"  \u2705 Performance and load testing\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1308 |         print(f\"  \u2705 Quantum coherence validation\")\n1309 |         print(f\"  \u2705 Regression and chaos testing\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1308:15\n     |\n1306 |         print(f\"  \u2705 Security and compliance testing\")\n1307 |         print(f\"  \u2705 Performance and load testing\")\n1308 |         print(f\"  \u2705 Quantum coherence validation\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1309 |         print(f\"  \u2705 Regression and chaos testing\")\n1310 |         print(f\"  \u2705 Automated report generation\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1309:15\n     |\n1307 |         print(f\"  \u2705 Performance and load testing\")\n1308 |         print(f\"  \u2705 Quantum coherence validation\")\n1309 |         print(f\"  \u2705 Regression and chaos testing\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1310 |         print(f\"  \u2705 Automated report generation\")\n1311 |         print(f\"  \u2705 Clinical evaluation compliance\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1310:15\n     |\n1308 |         print(f\"  \u2705 Quantum coherence validation\")\n1309 |         print(f\"  \u2705 Regression and chaos testing\")\n1310 |         print(f\"  \u2705 Automated report generation\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1311 |         print(f\"  \u2705 Clinical evaluation compliance\")\n     |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n    --> src/quantum_medical_quality_assurance.py:1311:15\n     |\n1309 |         print(f\"  \u2705 Regression and chaos testing\")\n1310 |         print(f\"  \u2705 Automated report generation\")\n1311 |         print(f\"  \u2705 Clinical evaluation compliance\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1312 |         \n1313 |     except Exception as e:\n     |\nhelp: Remove extraneous `f` prefix\n\nF821 Undefined name `Callable`\n   --> src/quantum_scaling_orchestrator.py:628:61\n    |\n626 |             return 50.0  # Default\n627 |     \n628 |     async def continuous_scaling_loop(self, metrics_source: Callable):\n    |                                                             ^^^^^^^^\n629 |         \"\"\"Run continuous scaling loop\"\"\"\n630 |         self.logger.info(\"Starting quantum-enhanced continuous scaling loop\")\n    |\n\nF841 Local variable `failed_events` is assigned to but never used\n   --> src/quantum_scaling_orchestrator.py:675:9\n    |\n674 |         successful_events = [e for e in recent_events if e.success]\n675 |         failed_events = [e for e in recent_events if not e.success]\n    |         ^^^^^^^^^^^^^\n676 |         \n677 |         return {\n    |\nhelp: Remove assignment to unused variable `failed_events`\n\nF402 Import `field` from line 14 shadowed by loop variable\n   --> src/quantum_security_framework.py:603:13\n    |\n602 |         encrypted_data = data.copy()\n603 |         for field in sensitive_fields:\n    |             ^^^^^\n604 |             if field in encrypted_data:\n605 |                 field_data = json.dumps(encrypted_data[field]).encode()\n    |\n\nF541 [*] f-string without any placeholders\n   --> src/real_time_adaptive_quantum_optimizer.py:706:19\n    |\n705 |             print(f\"\u2705 Optimized coherence: {optimization_result['optimized_coherence']:.3f}\")\n706 |             print(f\"\u2705 Resource allocation updated\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n707 |             \n708 |             # Wait and show status\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/real_time_quantum_coherence_optimizer.py:771:15\n    |\n769 |         # Get status report\n770 |         status = optimizer.get_optimization_status()\n771 |         print(f\"\\nOptimization Status Report:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n772 |         print(f\"System Running: {status['system_status']['is_running']}\")\n773 |         print(f\"Optimization Cycles: {status['system_status']['optimization_cycles_completed']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `history` is assigned to but never used\n   --> src/research/experimental_framework.py:161:17\n    |\n159 |                 X_val, y_val = val_data\n160 |                 \n161 |                 history = model.fit(\n    |                 ^^^^^^^\n162 |                     X_train, y_train,\n163 |                     validation_data=(X_val, y_val),\n    |\nhelp: Remove assignment to unused variable `history`\n\nF841 Local variable `n_qubits` is assigned to but never used\n   --> src/research/novel_quantum_medical_algorithms.py:234:9\n    |\n232 |         \"\"\"Apply rotation gates to specified qubit.\"\"\"\n233 |         \n234 |         n_qubits = int(np.log2(len(amplitudes)))\n    |         ^^^^^^^^\n235 |         new_amplitudes = amplitudes.copy()\n    |\nhelp: Remove assignment to unused variable `n_qubits`\n\nF841 Local variable `sin_half` is assigned to but never used\n   --> src/research/novel_quantum_medical_algorithms.py:244:17\n    |\n242 |                 # Apply rotation to |0\u27e9 state\n243 |                 cos_half = np.cos(ry/2) * np.cos(rx/2)\n244 |                 sin_half = np.sin(ry/2) * np.sin(rx/2)\n    |                 ^^^^^^^^\n245 |                 phase = np.exp(1j * rz/2)\n    |\nhelp: Remove assignment to unused variable `sin_half`\n\nF841 Local variable `target_bit` is assigned to but never used\n   --> src/research/novel_quantum_medical_algorithms.py:260:13\n    |\n258 |         for i in range(len(amplitudes)):\n259 |             control_bit = (i >> control) & 1\n260 |             target_bit = (i >> target) & 1\n    |             ^^^^^^^^^^\n261 |             \n262 |             if control_bit == 1:\n    |\nhelp: Remove assignment to unused variable `target_bit`\n\nF541 [*] f-string without any placeholders\n   --> src/research/novel_quantum_medical_fusion.py:611:21\n    |\n610 |         with open(report_path, 'w') as f:\n611 |             f.write(f\"# Quantum-Medical Fusion Algorithm Research Report\\n\\n\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n612 |             f.write(f\"**Experiment ID:** {experiment.experiment_id}\\n\")\n613 |             f.write(f\"**Generated:** {time.strftime('%Y-%m-%d %H:%M:%S')}\\n\\n\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/research/novel_quantum_medical_fusion.py:625:21\n    |\n623 |             f.write(f\"- Quantum algorithms tested: {len(quantum_results)}\\n\")\n624 |             f.write(f\"- Baseline algorithms: {experiment.baseline_algorithms}\\n\")\n625 |             f.write(f\"- Runs per algorithm: 5 (for statistical significance)\\n\\n\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n626 |             \n627 |             f.write(\"## Results\\n\\n\")\n    |\nhelp: Remove extraneous `f` prefix\n\nE722 Do not use bare `except`\n   --> src/research/novel_quantum_medical_fusion.py:818:9\n    |\n816 |         try:\n817 |             auc_score = roc_auc_score(true_labels, predictions)\n818 |         except:\n    |         ^^^^^^\n819 |             auc_score = 0.5\n    |\n\nE722 Do not use bare `except`\n   --> src/research/novel_quantum_medical_fusion.py:835:13\n    |\n833 |             try:\n834 |                 bootstrap_auc = roc_auc_score(bootstrap_true, bootstrap_pred)\n835 |             except:\n    |             ^^^^^^\n836 |                 bootstrap_auc = 0.5\n    |\n\nF402 Import `field` from line 23 shadowed by loop variable\n   --> src/research/robust_quantum_medical_validation.py:447:13\n    |\n445 |         # Check required fields\n446 |         required_fields = [\"patient_id\", \"algorithm_name\"]\n447 |         for field in required_fields:\n    |             ^^^^^\n448 |             if field not in validation_config:\n449 |                 raise ValueError(f\"Missing required field: {field}\")\n    |\n\nF841 Local variable `validator` is assigned to but never used\n   --> src/research/robust_quantum_medical_validation.py:461:13\n    |\n459 |         # Validate using Pydantic model\n460 |         try:\n461 |             validator = MedicalDataValidator(\n    |             ^^^^^^^^^\n462 |                 patient_id=validation_config[\"patient_id\"],\n463 |                 data_type=validation_config.get(\"data_type\", \"xray\"),\n    |\nhelp: Remove assignment to unused variable `validator`\n\nF541 [*] f-string without any placeholders\n  --> src/robust_error_recovery.py:35:37\n   |\n33 |                     self.failure_count = 0\n34 |                 else:\n35 |                     raise Exception(f\"Circuit breaker is OPEN. Service unavailable.\")\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n36 |             \n37 |             try:\n   |\nhelp: Remove extraneous `f` prefix\n\nF402 Import `field` from line 15 shadowed by loop variable\n   --> src/robust_quantum_medical_framework.py:393:13\n    |\n391 |         encrypted_data = data.copy()\n392 |         \n393 |         for field in sensitive_fields:\n    |             ^^^^^\n394 |             if field in encrypted_data:\n395 |                 value = str(encrypted_data[field]).encode()\n    |\n\nF402 Import `field` from line 15 shadowed by loop variable\n   --> src/robust_quantum_medical_framework.py:406:13\n    |\n404 |         decrypted_data = encrypted_data.copy()\n405 |         \n406 |         for field in sensitive_fields:\n    |             ^^^^^\n407 |             if field in decrypted_data and isinstance(decrypted_data[field], str):\n408 |                 try:\n    |\n\nF541 [*] f-string without any placeholders\n   --> src/robust_quantum_medical_framework.py:823:15\n    |\n822 |         # Display compliance audit summary\n823 |         print(f\"\\n\ud83d\udd0d Compliance Audit Summary:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n824 |         print(f\"  Total audit entries: {len(framework.compliance_audit_log)}\")\n825 |         print(f\"  Session activities: {len([e for e in framework.compliance_audit_log if 'session' in e.action])}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/robust_quantum_medical_framework.py:829:15\n    |\n828 |         # Display security metrics\n829 |         print(f\"\\n\ud83d\udee1\ufe0f Security Metrics:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n830 |         print(f\"  Active sessions: {len(framework.active_sessions)}\")\n831 |         print(f\"  Circuit breaker status: {health_status['circuit_breakers']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/robust_quantum_medical_framework.py:834:19\n    |\n833 |         if health_status['alerts']:\n834 |             print(f\"\\n\u26a0\ufe0f System Alerts:\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n835 |             for alert in health_status['alerts']:\n836 |                 print(f\"  \u2022 {alert}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nE722 Do not use bare `except`\n   --> src/scalable_quantum_medical_orchestrator.py:539:17\n    |\n537 |                 try:\n538 |                     priority, submission_time, workload = self.workload_queue.get(timeout=1.0)\n539 |                 except:\n    |                 ^^^^^^\n540 |                     continue\n    |\n\nF841 Local variable `results` is assigned to but never used\n   --> src/scalable_quantum_medical_orchestrator.py:547:21\n    |\n546 |                 try:\n547 |                     results = loop.run_until_complete(\n    |                     ^^^^^^^\n548 |                         self.process_workload_distributed(workload)\n549 |                     )\n    |\nhelp: Remove assignment to unused variable `results`\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:922:15\n    |\n920 |         status = orchestrator.get_orchestrator_status()\n921 |         \n922 |         print(f\"\\n\ud83d\udcc8 Orchestrator Status:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n923 |         print(f\"  System Health: {status['system_health'].upper()}\")\n924 |         print(f\"  Active Workloads: {status['active_workloads']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:931:19\n    |\n929 |         if status['recent_performance']:\n930 |             perf = status['recent_performance']\n931 |             print(f\"  Recent Performance:\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^\n932 |             print(f\"    Throughput: {perf.get('throughput', 0):.2f} diagnoses/sec\")\n933 |             print(f\"    Latency P95: {perf.get('latency_p95', 0):.3f}s\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:939:15\n    |\n937 |         # Display resource utilization\n938 |         resource_util = status['resource_utilization']\n939 |         print(f\"\\n\u2699\ufe0f Resource Utilization:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n940 |         for resource, utilization in resource_util.items():\n941 |             print(f\"  {resource.name}: {utilization:.1%}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:943:15\n    |\n941 |             print(f\"  {resource.name}: {utilization:.1%}\")\n942 |         \n943 |         print(f\"\\n\ud83c\udfaf Scalability Features Demonstrated:\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n944 |         print(f\"  \u2705 Distributed processing across {len(node_ids)} nodes\")\n945 |         print(f\"  \u2705 Intelligent workload batching and optimization\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:945:15\n    |\n943 |         print(f\"\\n\ud83c\udfaf Scalability Features Demonstrated:\")\n944 |         print(f\"  \u2705 Distributed processing across {len(node_ids)} nodes\")\n945 |         print(f\"  \u2705 Intelligent workload batching and optimization\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n946 |         print(f\"  \u2705 Quantum-enhanced performance optimization\")\n947 |         print(f\"  \u2705 Adaptive load balancing and resource management\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:946:15\n    |\n944 |         print(f\"  \u2705 Distributed processing across {len(node_ids)} nodes\")\n945 |         print(f\"  \u2705 Intelligent workload batching and optimization\")\n946 |         print(f\"  \u2705 Quantum-enhanced performance optimization\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n947 |         print(f\"  \u2705 Adaptive load balancing and resource management\")\n948 |         print(f\"  \u2705 Comprehensive performance monitoring\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:947:15\n    |\n945 |         print(f\"  \u2705 Intelligent workload batching and optimization\")\n946 |         print(f\"  \u2705 Quantum-enhanced performance optimization\")\n947 |         print(f\"  \u2705 Adaptive load balancing and resource management\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n948 |         print(f\"  \u2705 Comprehensive performance monitoring\")\n949 |         print(f\"  \u2705 Enterprise-grade security and compliance\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:948:15\n    |\n946 |         print(f\"  \u2705 Quantum-enhanced performance optimization\")\n947 |         print(f\"  \u2705 Adaptive load balancing and resource management\")\n948 |         print(f\"  \u2705 Comprehensive performance monitoring\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n949 |         print(f\"  \u2705 Enterprise-grade security and compliance\")\n    |\nhelp: Remove extraneous `f` prefix\n\nF541 [*] f-string without any placeholders\n   --> src/scalable_quantum_medical_orchestrator.py:949:15\n    |\n947 |         print(f\"  \u2705 Adaptive load balancing and resource management\")\n948 |         print(f\"  \u2705 Comprehensive performance monitoring\")\n949 |         print(f\"  \u2705 Enterprise-grade security and compliance\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |         \n951 |     except Exception as e:\n    |\nhelp: Remove extraneous `f` prefix\n\nF841 Local variable `request_mean` is assigned to but never used\n   --> src/scaling/intelligent_auto_scaler.py:255:9\n    |\n253 |         cpu_trend = self._calculate_trend(cpu_values)\n254 |         \n255 |         request_mean = np.mean(request_counts)\n    |         ^^^^^^^^^^^^\n256 |         request_std = np.std(request_counts)\n257 |         request_trend = self._calculate_trend(request_counts)\n    |\nhelp: Remove assignment to unused variable `request_mean`\n\nF841 Local variable `request_std` is assigned to but never used\n   --> src/scaling/intelligent_auto_scaler.py:256:9\n    |\n255 |         request_mean = np.mean(request_counts)\n256 |         request_std = np.std(request_counts)\n    |         ^^^^^^^^^^^\n257 |         request_trend = self._calculate_trend(request_counts)\n    |\nhelp: Remove assignment to unused variable `request_std`\n\nF841 Local variable `request_trend` is assigned to but never used\n   --> src/scaling/intelligent_auto_scaler.py:257:9\n    |\n255 |         request_mean = np.mean(request_counts)\n256 |         request_std = np.std(request_counts)\n257 |         request_trend = self._calculate_trend(request_counts)\n    |         ^^^^^^^^^^^^^\n258 |         \n259 |         # Pattern detection logic\n    |\nhelp: Remove assignment to unused variable `request_trend`\n\nF841 Local variable `disk_io` is assigned to but never used\n   --> src/scaling/intelligent_auto_scaler.py:737:9\n    |\n736 |         # Disk and network I/O\n737 |         disk_io = psutil.disk_io_counters()\n    |         ^^^^^^^\n738 |         network_io = psutil.net_io_counters()\n    |\nhelp: Remove assignment to unused variable `disk_io`\n\nF841 Local variable `network_io` is assigned to but never used\n   --> src/scaling/intelligent_auto_scaler.py:738:9\n    |\n736 |         # Disk and network I/O\n737 |         disk_io = psutil.disk_io_counters()\n738 |         network_io = psutil.net_io_counters()\n    |         ^^^^^^^^^^\n739 |         \n740 |         # Application metrics\n    |\nhelp: Remove assignment to unused variable `network_io`\n\nF821 Undefined name `pickle`\n  --> src/security/medical_data_protection.py:69:25\n   |\n67 |         \"\"\"Encrypt model weights for secure storage.\"\"\"\n68 |         weights = model.get_weights()\n69 |         weights_bytes = pickle.dumps(weights)\n   |                         ^^^^^^\n70 |         return self.encrypt_data(weights_bytes)\n   |\n\nF841 Local variable `patient_id` is assigned to but never used\n   --> src/security/medical_data_protection.py:269:17\n    |\n267 |             # Log predictions\n268 |             for i, (pred, conf) in enumerate(zip(predictions.flatten(), confidences)):\n269 |                 patient_id = patient_ids[i] if patient_ids else f\"unknown_{i}\"\n    |                 ^^^^^^^^^^\n270 |                 self.audit_logger.log_model_prediction(\n271 |                     user_id, self.model_name, float(pred), float(conf)\n    |\nhelp: Remove assignment to unused variable `patient_id`\n\nF841 Local variable `list_parser` is assigned to but never used\n   --> src/simple_deployment_manager.py:299:5\n    |\n298 |     # List deployments command\n299 |     list_parser = subparsers.add_parser(\"list\", help=\"List deployments\")\n    |     ^^^^^^^^^^^\n300 |     \n301 |     # Build deployment command\n    |\nhelp: Remove assignment to unused variable `list_parser`\n\nF402 Import `field` from line 9 shadowed by loop variable\n   --> src/validation/comprehensive_input_validation.py:504:13\n    |\n502 |         ]\n503 |         \n504 |         for field in required_fields:\n    |             ^^^^^\n505 |             if field not in patient_data:\n506 |                 result.errors.append(f\"Missing required field: {field}\")\n    |\n\nF541 [*] f-string without any placeholders\n   --> src/validation/comprehensive_validators.py:585:11\n    |\n583 |     summary = validator.generate_validation_report(results, \"demo_validation_report.json\")\n584 |     \n585 |     print(f\"Validation completed!\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n586 |     print(f\"Overall score: {results['overall_score']:.3f}\")\n587 |     print(f\"Pass criteria: {results['pass_criteria']}\")\n    |\nhelp: Remove extraneous `f` prefix\n\nFound 212 errors.\n[*] 125 fixable with the `--fix` option (42 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
      "stderr": "warning: The top-level linter settings are deprecated in favour of their counterparts in the `lint` section. Please update the following options in `pyproject.toml`:\n  - 'ignore' -> 'lint.ignore'\n  - 'select' -> 'lint.select'\n  - 'per-file-ignores' -> 'lint.per-file-ignores'\n",
      "execution_time": 0.18579435348510742,
      "passed": true
    },
    {
      "description": "Security vulnerability scan",
      "command": "bandit -r src/ -ll -f json -o security_report.json",
      "return_code": 1,
      "stdout": "Working... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:09\n",
      "stderr": "[main]\tINFO\tprofile include tests: None\n[main]\tINFO\tprofile exclude tests: None\n[main]\tINFO\tcli include tests: None\n[main]\tINFO\tcli exclude tests: None\n[json]\tINFO\tJSON output written to file: security_report.json\n",
      "execution_time": 9.679599285125732,
      "passed": false
    },
    {
      "description": "Gen4 Neural Quantum Fusion import test",
      "command": "python3 -c \"import sys; sys.path.append('src'); from gen4_neural_quantum_fusion import create_gen4_neural_quantum_fusion; print('Gen4 Neural Quantum Fusion: PASSED')\"",
      "return_code": 0,
      "stdout": "Gen4 Neural Quantum Fusion: PASSED\n",
      "stderr": "",
      "execution_time": 0.23269963264465332,
      "passed": true
    },
    {
      "description": "Adaptive Intelligence Orchestrator import test",
      "command": "python3 -c \"import sys; sys.path.append('src'); from adaptive_intelligence_orchestrator import create_adaptive_intelligence_orchestrator; print('Adaptive Intelligence Orchestrator: PASSED')\"",
      "return_code": 0,
      "stdout": "Adaptive Intelligence Orchestrator: PASSED\n",
      "stderr": "",
      "execution_time": 0.3181800842285156,
      "passed": true
    },
    {
      "description": "Robust Medical AI Framework import test",
      "command": "python3 -c \"import sys; sys.path.append('src'); from robust_medical_ai_framework import create_robust_medical_ai_framework; print('Robust Medical AI Framework: PASSED')\"",
      "return_code": 0,
      "stdout": "Robust Medical AI Framework: PASSED\n",
      "stderr": "",
      "execution_time": 0.24068522453308105,
      "passed": true
    },
    {
      "description": "Core file structure validation",
      "command": "ls -la src/gen4_neural_quantum_fusion.py src/adaptive_intelligence_orchestrator.py src/robust_medical_ai_framework.py src/comprehensive_testing_validation_framework.py src/quantum_scale_optimization_engine.py",
      "return_code": 0,
      "stdout": "-rw-r--r-- 1 root root 23638 Aug 24 21:49 src/adaptive_intelligence_orchestrator.py\n-rw-r--r-- 1 root root 29774 Aug 24 21:42 src/comprehensive_testing_validation_framework.py\n-rw-r--r-- 1 root root 18709 Aug 24 21:37 src/gen4_neural_quantum_fusion.py\n-rw-r--r-- 1 root root 40418 Aug 24 21:45 src/quantum_scale_optimization_engine.py\n-rw-r--r-- 1 root root 29139 Aug 24 21:41 src/robust_medical_ai_framework.py\n",
      "stderr": "",
      "execution_time": 0.008752107620239258,
      "passed": true
    }
  ],
  "failed_required_checks": [
    "Security vulnerability scan"
  ]
}